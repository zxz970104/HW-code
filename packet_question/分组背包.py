'''
题意描述：
有 N 组物品和一个容量是 V 的背包。
每组物品有若干个，同一组内的物品最多只能选一个。
每件物品的体积是 vij，价值是 wij，其中 i 是组号，j 是组内编号。
求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。
输出最大价值。
输入格式
第一行有两个整数 N，V，用空格隔开，分别表示物品组数和背包容量。
接下来有 N 组数据：
每组数据第一行有一个整数 Si，表示第 i 个物品组的物品数量；
每组数据接下来有 Si 行，每行有两个整数 vij,wij，用空格隔开，分别表示第 i 个物品组的第 j 个物品的体积和价值；
输出格式
输出一个整数，表示最大价值。
数据范围
0<N,V≤100
0<Si≤100
0<vij,wij≤100
输入样例
3 5
2
1 2
2 4
1
3 4
1
4 5
输出样例：
8
'''

'''
解析:
类似于多重背包不使用二进制优化
原先多重背包每种物品有多个，假设第一个物品有3个，可以把第一个物品是一组，这组里面有三种物品，体积与价值分别是原先物品的1,2,3倍
'''

N, V = 3, 8
info = [
    [[1, 2], [2, 4]],
    [[3, 4], [4, 5]],
    [[5, 7], [6, 10]]
]

def solve():
    dp = [0 for _ in range(V + 1)]
    for i in range(1, N + 1):
        for j in reversed(range(1, V + 1)):
            for k in range(len(info[i - 1])):
                if j >= info[i - 1][k][0]:
                    dp[j] = max(dp[j], dp[j - info[i - 1][k][0]] + info[i - 1][k][1])
    return dp[V]

print(solve())